/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projetozika.Pages;

import Config.Environment;
import DAO.PedidoDAO;
import DAO.ProdutoDAO;
import Models.GraphModel;
import Utils.Methods;
import java.awt.Color;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.Properties;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.data.category.DefaultCategoryDataset;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

/**
 * Tela do dashboard
 * @author Welison
 */
public class Dashboard extends Templates.BaseLayout {
    private JPanel bg;
    private ProdutoDAO produtoDao;
    private ArrayList<GraphModel> produtosDados;
    private PedidoDAO pedidoDao;
    private ArrayList<GraphModel> pedidosDados;
    
    /**
     * Cria a tela do dashboard
     * @param params Parâmetros para filtro e paginação
     */
    public Dashboard(Properties params) {
        super();
        this.self = this;
        this.params = params;
        
        // inicia os componentes
        initComponents();
        createBaseLayout();
        addCenterContent();
        addTopContent(Methods.getTranslation("Dashboard"));
    }
    
    /**
     * Adiciona os elmentos da àrea central do layout
     */
    private void addCenterContent() {
        bg = new JPanel();
        bg.setLayout(new AbsoluteLayout());
        bg.setOpaque(false);
        
        chartPedidos();
        chartProdutos();
        
        pCenter.add(bg);
    }
    
    /**
     * Gera o gráfico de pedidos
     */
    private void chartPedidos() {
        
        // pega os dados da base de dados
        pedidoDao = new PedidoDAO();
        pedidosDados = pedidoDao.graphData();
        
        
        // carrega os dados no gráfico
        DefaultCategoryDataset dataPedidos = new DefaultCategoryDataset();
        pedidosDados.forEach(graph -> {
            dataPedidos.setValue(graph.getQuantidade(), "", Environment.MONTHS[graph.getMonth()-1]);
        });
        
        // constrói o gráfico
        buildChart(
                dataPedidos, 
                Methods.getTranslation("PedidosRealizados"), 
                Methods.getTranslation("Mes"), 
                Methods.getTranslation("Media"), 
                new Color(79, 129, 189), 
                0, 
                0
        );
    }
    
    /**
     * Gera o gráfico de produtos
     */
    private void chartProdutos() {
        
        // pega os dados da base de dados
        produtoDao = new ProdutoDAO();
        produtosDados = produtoDao.graphData();
        
        // carrega os dados no gráfico
        DefaultCategoryDataset dataProdutos = new DefaultCategoryDataset();
        produtosDados.forEach(graph -> {
            dataProdutos.setValue(graph.getQuantidade(), "", Environment.MONTHS[graph.getMonth()-1]);
        });
        
        // constrói o gráfico
        buildChart(
                dataProdutos, 
                Methods.getTranslation("EntradaProdutos"), 
                Methods.getTranslation("Mes"), 
                Methods.getTranslation("Media"), 
                new Color(29, 129, 89), 
                500, 
                0
        );
    }
    
    /**
     * Helper para construição de gráficos
     * @param dataset o dataset com os dados do gráfico
     * @param title o título do gráfico
     * @param titleCol o título das colunas
     * @param titleRow o título das linhas
     * @param color a cor do gráfico
     * @param x a posição x
     * @param y a posição y
     */
    private void buildChart(DefaultCategoryDataset dataset, String title, String titleCol, String titleRow, Color color, int x, int y) {
        JFreeChart chartPedidos = ChartFactory.createBarChart3D(title, titleCol, titleRow, dataset);
        ChartPanel chartPanel = new ChartPanel(chartPedidos);
        chartPanel.setPreferredSize(new Dimension(450, 300));
        CategoryPlot plot = chartPedidos.getCategoryPlot();
        BarRenderer renderer = (BarRenderer) plot.getRenderer();
        renderer.setSeriesPaint(0, color);
        renderer.setBaseSeriesVisibleInLegend(false);
        bg.add(chartPanel, new AbsoluteConstraints(x, y, -1, -1));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(37, 38, 39));
        setBorder(javax.swing.BorderFactory.createEmptyBorder(50, 25, 50, 25));
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
